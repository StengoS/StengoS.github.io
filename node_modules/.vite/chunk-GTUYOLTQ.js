import {
  TileImage_default,
  createFromTemplates,
  createXYZ,
  extentFromProjection
} from "./chunk-CFTYDWHB.js";
import {
  State_default
} from "./chunk-WY5HO4B4.js";
import {
  get,
  getTransformFromProjections
} from "./chunk-S2DQ2KZ3.js";
import {
  applyTransform,
  intersects
} from "./chunk-DRSAYMAU.js";
import {
  assert,
  getUid
} from "./chunk-LO2Q3WRB.js";

// node_modules/ol/net.js
var __extends = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
function jsonp(url, callback, opt_errback, opt_callbackParam) {
  var script = document.createElement("script");
  var key = "olc_" + getUid(callback);
  function cleanup() {
    delete window[key];
    script.parentNode.removeChild(script);
  }
  script.async = true;
  script.src = url + (url.indexOf("?") == -1 ? "?" : "&") + (opt_callbackParam || "callback") + "=" + key;
  var timer = setTimeout(function() {
    cleanup();
    if (opt_errback) {
      opt_errback();
    }
  }, 1e4);
  window[key] = function(data) {
    clearTimeout(timer);
    cleanup();
    callback(data);
  };
  document.getElementsByTagName("head")[0].appendChild(script);
}
var ResponseError = function(_super) {
  __extends(ResponseError2, _super);
  function ResponseError2(response) {
    var _this = this;
    var message = "Unexpected response status: " + response.status;
    _this = _super.call(this, message) || this;
    _this.name = "ResponseError";
    _this.response = response;
    return _this;
  }
  return ResponseError2;
}(Error);
var ClientError = function(_super) {
  __extends(ClientError2, _super);
  function ClientError2(client) {
    var _this = _super.call(this, "Failed to issue request") || this;
    _this.name = "ClientError";
    _this.client = client;
    return _this;
  }
  return ClientError2;
}(Error);

// node_modules/ol/source/TileJSON.js
var __extends2 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var TileJSON = function(_super) {
  __extends2(TileJSON2, _super);
  function TileJSON2(options) {
    var _this = _super.call(this, {
      attributions: options.attributions,
      cacheSize: options.cacheSize,
      crossOrigin: options.crossOrigin,
      imageSmoothing: options.imageSmoothing,
      projection: get("EPSG:3857"),
      reprojectionErrorThreshold: options.reprojectionErrorThreshold,
      state: State_default.LOADING,
      tileLoadFunction: options.tileLoadFunction,
      wrapX: options.wrapX !== void 0 ? options.wrapX : true,
      transition: options.transition,
      zDirection: options.zDirection
    }) || this;
    _this.tileJSON_ = null;
    _this.tileSize_ = options.tileSize;
    if (options.url) {
      if (options.jsonp) {
        jsonp(options.url, _this.handleTileJSONResponse.bind(_this), _this.handleTileJSONError.bind(_this));
      } else {
        var client = new XMLHttpRequest();
        client.addEventListener("load", _this.onXHRLoad_.bind(_this));
        client.addEventListener("error", _this.onXHRError_.bind(_this));
        client.open("GET", options.url);
        client.send();
      }
    } else if (options.tileJSON) {
      _this.handleTileJSONResponse(options.tileJSON);
    } else {
      assert(false, 51);
    }
    return _this;
  }
  TileJSON2.prototype.onXHRLoad_ = function(event) {
    var client = event.target;
    if (!client.status || client.status >= 200 && client.status < 300) {
      var response = void 0;
      try {
        response = JSON.parse(client.responseText);
      } catch (err) {
        this.handleTileJSONError();
        return;
      }
      this.handleTileJSONResponse(response);
    } else {
      this.handleTileJSONError();
    }
  };
  TileJSON2.prototype.onXHRError_ = function(event) {
    this.handleTileJSONError();
  };
  TileJSON2.prototype.getTileJSON = function() {
    return this.tileJSON_;
  };
  TileJSON2.prototype.handleTileJSONResponse = function(tileJSON) {
    var epsg4326Projection = get("EPSG:4326");
    var sourceProjection = this.getProjection();
    var extent;
    if (tileJSON["bounds"] !== void 0) {
      var transform = getTransformFromProjections(epsg4326Projection, sourceProjection);
      extent = applyTransform(tileJSON["bounds"], transform);
    }
    var gridExtent = extentFromProjection(sourceProjection);
    var minZoom = tileJSON["minzoom"] || 0;
    var maxZoom = tileJSON["maxzoom"] || 22;
    var tileGrid = createXYZ({
      extent: gridExtent,
      maxZoom,
      minZoom,
      tileSize: this.tileSize_
    });
    this.tileGrid = tileGrid;
    this.tileUrlFunction = createFromTemplates(tileJSON["tiles"], tileGrid);
    if (tileJSON["attribution"] !== void 0 && !this.getAttributions()) {
      var attributionExtent_1 = extent !== void 0 ? extent : gridExtent;
      this.setAttributions(function(frameState) {
        if (intersects(attributionExtent_1, frameState.extent)) {
          return [tileJSON["attribution"]];
        }
        return null;
      });
    }
    this.tileJSON_ = tileJSON;
    this.setState(State_default.READY);
  };
  TileJSON2.prototype.handleTileJSONError = function() {
    this.setState(State_default.ERROR);
  };
  return TileJSON2;
}(TileImage_default);
var TileJSON_default = TileJSON;

export {
  jsonp,
  TileJSON_default
};
//# sourceMappingURL=chunk-GTUYOLTQ.js.map
